diff --git a/node_modules/expo-modules-core/ios/Core/Convertibles/Convertibles+Color.swift b/node_modules/expo-modules-core/ios/Core/Convertibles/Convertibles+Color.swift
index 97e9df0..9643f4b 100644
--- a/node_modules/expo-modules-core/ios/Core/Convertibles/Convertibles+Color.swift
+++ b/node_modules/expo-modules-core/ios/Core/Convertibles/Convertibles+Color.swift
@@ -35,6 +35,7 @@ extension UIColor: Convertible {
         let highContrastLightColor = try appearances["highContrastLight"].map({ try UIColor.convert(from: $0, appContext: appContext) })
         let highContrastDarkColor = try appearances["highContrastDark"].map({ try UIColor.convert(from: $0, appContext: appContext) })
 
+        #if os(iOS) || os(tvOS)
         let color = UIColor { (traitCollection: UITraitCollection) -> UIColor in
           if traitCollection.userInterfaceStyle == .dark {
             if traitCollection.accessibilityContrast == .high, let highContrastDarkColor {
@@ -48,7 +49,28 @@ extension UIColor: Convertible {
           }
           return lightColor
         }
+        
         return color as! Self
+        #elseif os(macOS)
+        // For macOS, use NSAppearance
+        return NSColor(name: nil) { (appearance: NSAppearance) -> NSColor in
+          let isDarkMode = appearance.bestMatch(from: [.darkAqua, .aqua]) == .darkAqua
+          let isHighContrast = NSWorkspace.shared.accessibilityDisplayShouldIncreaseContrast
+          
+          if isDarkMode {
+            if isHighContrast, let highContrastDarkColor = highContrastDarkColor {
+              return highContrastDarkColor
+            }
+            return darkColor
+          }
+          
+          if isHighContrast, let highContrastLightColor = highContrastLightColor {
+            return highContrastLightColor
+          }
+          return lightColor
+        } as! Self
+        #endif
+        
       }
     }
     throw Conversions.ConvertingException<UIColor>(value)
diff --git a/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegate.swift b/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegate.swift
index a792ef0..918132f 100644
--- a/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegate.swift
+++ b/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegate.swift
@@ -11,6 +11,7 @@ public class ExpoReactDelegate: NSObject {
     self.handlers = handlers
   }
 
+  #if !os(macOS)
   @objc
   public func createReactRootView(
     moduleName: String,
@@ -32,6 +33,16 @@ public class ExpoReactDelegate: NSObject {
         )
       }()
   }
+  #else
+  @objc
+  public func createReactRootView(
+    moduleName: String,
+    initialProperties: [AnyHashable: Any]?,
+    launchOptions: [AnyHashable: Any]?
+  ) -> UIView {
+    return UIView()
+  }
+  #endif
   
   @objc
   public func bundleURL() -> URL? {
diff --git a/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegateHandler.swift b/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegateHandler.swift
index 1d2e940..3ddfcf4 100644
--- a/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegateHandler.swift
+++ b/node_modules/expo-modules-core/ios/ReactDelegates/ExpoReactDelegateHandler.swift
@@ -7,6 +7,7 @@
 open class ExpoReactDelegateHandler: NSObject {
   public override required init() {}
 
+  #if !os(macOS)
   /**
    If this module wants to handle React instance and the root view creation, it can return the instance.
    Otherwise return nil.
@@ -20,6 +21,7 @@ open class ExpoReactDelegateHandler: NSObject {
   ) -> UIView? {
     return nil
   }
+  #endif
 
   /**
    Clients could override this getter to serve the latest bundleURL for React instance.
diff --git a/node_modules/expo-modules-core/ios/ReactDelegates/RCTAppDelegate+Recreate.h b/node_modules/expo-modules-core/ios/ReactDelegates/RCTAppDelegate+Recreate.h
index e30fdcb..37035a1 100644
--- a/node_modules/expo-modules-core/ios/ReactDelegates/RCTAppDelegate+Recreate.h
+++ b/node_modules/expo-modules-core/ios/ReactDelegates/RCTAppDelegate+Recreate.h
@@ -18,10 +18,12 @@ NS_ASSUME_NONNULL_BEGIN
  If any of these parameters is null, the method will use the original one from `RCTAppDelegate` or `RCTRootViewFactory`.
  This method should be used with `EXReactRootViewFactory` that to recreate a root view.
  */
+#if !TARGET_OS_OSX
 - (UIView *)recreateRootViewWithBundleURL:(nullable NSURL *)bundleURL
                                moduleName:(nullable NSString *)moduleName
                              initialProps:(nullable NSDictionary *)initialProps
                             launchOptions:(nullable NSDictionary *)launchOptions;
+#endif
 
 @end
 
